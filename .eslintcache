[{"C:\\Coding\\Osu\\greaper-website\\src\\App.tsx":"1","C:\\Coding\\Osu\\greaper-website\\src\\components\\form\\CheckboxInput.tsx":"2","C:\\Coding\\Osu\\greaper-website\\src\\components\\form\\NumberInput.tsx":"3","C:\\Coding\\Osu\\greaper-website\\src\\components\\form\\SnappingInput.tsx":"4","C:\\Coding\\Osu\\greaper-website\\src\\components\\markdown\\Markdown.tsx":"5","C:\\Coding\\Osu\\greaper-website\\src\\components\\nav\\Nav.tsx":"6","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\dashDistance\\DashDistanceCalculator.tsx":"7","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\hyperTriggerDistance\\HyperTriggerDistanceCalculator.tsx":"8","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\SelectedTool.tsx":"9","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\SelectedToolSelector.tsx":"10","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\snappingSpecifier\\SnappingSpecifier.tsx":"11","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\snappingSpecifier\\SnappingSpecifierForm.tsx":"12","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\svFinder\\SliderVelocityCalculator.tsx":"13","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\svFinder\\SliderVelocityForm.tsx":"14","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\ToolsSideBar.tsx":"15","C:\\Coding\\Osu\\greaper-website\\src\\index.tsx":"16","C:\\Coding\\Osu\\greaper-website\\src\\pages\\guides\\Guides.tsx":"17","C:\\Coding\\Osu\\greaper-website\\src\\pages\\home\\Home.tsx":"18","C:\\Coding\\Osu\\greaper-website\\src\\pages\\NotFound.tsx":"19","C:\\Coding\\Osu\\greaper-website\\src\\pages\\tools\\Tools.tsx":"20","C:\\Coding\\Osu\\greaper-website\\src\\Types.ts":"21","C:\\Coding\\Osu\\greaper-website\\src\\utils\\FormUtil.ts":"22","C:\\Coding\\Osu\\greaper-website\\src\\utils\\MilliSecondsUtil.ts":"23"},{"size":3670,"mtime":1661450649584,"results":"24","hashOfConfig":"25"},{"size":625,"mtime":1661450353319,"results":"26","hashOfConfig":"25"},{"size":1455,"mtime":1650913752426,"results":"27","hashOfConfig":"25"},{"size":2710,"mtime":1641164130409,"results":"28","hashOfConfig":"25"},{"size":557,"mtime":1617558271242,"results":"29","hashOfConfig":"25"},{"size":2037,"mtime":1661450649709,"results":"30","hashOfConfig":"25"},{"size":5588,"mtime":1661450635415,"results":"31","hashOfConfig":"25"},{"size":5445,"mtime":1641166853461,"results":"32","hashOfConfig":"25"},{"size":1830,"mtime":1661450649808,"results":"33","hashOfConfig":"25"},{"size":1269,"mtime":1641166245997,"results":"34","hashOfConfig":"25"},{"size":12120,"mtime":1661450649893,"results":"35","hashOfConfig":"25"},{"size":1007,"mtime":1641164020172,"results":"36","hashOfConfig":"25"},{"size":2052,"mtime":1641160222076,"results":"37","hashOfConfig":"25"},{"size":751,"mtime":1641159216864,"results":"38","hashOfConfig":"25"},{"size":3130,"mtime":1661450649931,"results":"39","hashOfConfig":"25"},{"size":243,"mtime":1641159216886,"results":"40","hashOfConfig":"25"},{"size":908,"mtime":1661449711090,"results":"41","hashOfConfig":"25"},{"size":402,"mtime":1641148330388,"results":"42","hashOfConfig":"25"},{"size":161,"mtime":1641159216932,"results":"43","hashOfConfig":"25"},{"size":3716,"mtime":1661450649983,"results":"44","hashOfConfig":"25"},{"size":932,"mtime":1641166154853,"results":"45","hashOfConfig":"25"},{"size":154,"mtime":1641159217005,"results":"46","hashOfConfig":"25"},{"size":2405,"mtime":1661450650041,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k8x0ff",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Coding\\Osu\\greaper-website\\src\\App.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\form\\CheckboxInput.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\form\\NumberInput.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\form\\SnappingInput.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\markdown\\Markdown.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\nav\\Nav.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\dashDistance\\DashDistanceCalculator.tsx",["122"],[],"import React, { useEffect, useState } from 'react'\nimport { MillisecondSnappingReference, Snapping } from '../../../Types'\nimport { calculateSnaps } from '../../../utils/MilliSecondsUtil'\n\ninterface DashDistanceCalculatorProps {\n  bpm: number\n  circleSize: number\n  sliderVelocity: number\n  sliderVelocityMultiplier: number\n  customNumerator: number\n  customDenominator: number\n}\n\nexport default function DashDistanceCalculator({\n  bpm,\n  circleSize,\n  sliderVelocity,\n  sliderVelocityMultiplier,\n  customNumerator,\n  customDenominator\n}: DashDistanceCalculatorProps) {\n  const [result, setResult] = useState<SnappingDashResult[]>([])\n\n  useEffect(() => {\n    const snaps = calculateSnaps(bpm, customNumerator, customDenominator)\n    setResult(calculateTriggerDistances(snaps))\n  }, [\n    circleSize,\n    bpm,\n    sliderVelocity,\n    sliderVelocityMultiplier,\n    customNumerator,\n    customDenominator\n  ])\n\n  function getDashDistance(ms: number, dashRange: number): number {\n    const timeToNext = ms - 1000 / 60 / 4\n    return timeToNext + dashRange\n  }\n\n  function getSnappingResult(\n    snapping: Snapping,\n    snap: number,\n    walkRange: number,\n    xDistanceMultiplier: number\n  ): SnappingDashResult {\n    const dashDistance = getDashDistance(snap, walkRange)\n    const minDistance = dashDistance * 0.7\n    const maxDistance = dashDistance\n    const calculatedMinXDistance =\n      (minDistance / (sliderVelocity * sliderVelocityMultiplier * 100)) * xDistanceMultiplier\n    const calculatedMaxXDistance =\n      (maxDistance / (sliderVelocity * sliderVelocityMultiplier * 100)) * xDistanceMultiplier\n    let osuRoundedMinXDistance\n    let osuRoundedMaxXDistance\n\n    if (snap < 50) {\n      osuRoundedMinXDistance = calculatedMinXDistance * 1.02\n      osuRoundedMaxXDistance = calculatedMaxXDistance * 1.02\n    } else if (snap < 100) {\n      osuRoundedMinXDistance = calculatedMinXDistance * 1.01\n      osuRoundedMaxXDistance = calculatedMaxXDistance * 1.01\n    } else if (snap < 200) {\n      osuRoundedMinXDistance = calculatedMinXDistance * 1.005\n      osuRoundedMaxXDistance = calculatedMaxXDistance * 1.005\n    } else {\n      osuRoundedMinXDistance = calculatedMinXDistance\n      osuRoundedMaxXDistance = calculatedMaxXDistance\n    }\n\n    return {\n      snapping,\n      msSnapping: snap,\n      minDistance: minDistance,\n      maxDistance: maxDistance,\n      minXDistance: osuRoundedMinXDistance,\n      maxXDistance: osuRoundedMaxXDistance\n    }\n  }\n\n  function calculateTriggerDistances(snaps: MillisecondSnappingReference): SnappingDashResult[] {\n    const catchDifficulty = (circleSize - 5.0) / 5.0\n    const fruitWidth = (64.0 * (1.0 - 0.699999988079071 * catchDifficulty)) / 128.0\n    const catcherWidth = 305.0 * fruitWidth * 0.7\n    const walkRange = catcherWidth / 4.0\n\n    return [\n      getSnappingResult(Snapping.WHITE_TICK, snaps.whiteTick, walkRange, 1),\n      getSnappingResult(Snapping.RED_TICK, snaps.redTick, walkRange, 2),\n      getSnappingResult(Snapping.PURPLE_TICK, snaps.purpleTick, walkRange, 3),\n      getSnappingResult(Snapping.BLUE_TICK, snaps.blueTick, walkRange, 4),\n      getSnappingResult(Snapping.ONE_FIVE, snaps.oneFive, walkRange, 5),\n      getSnappingResult(Snapping.DARK_PURPLE_TICK, snaps.darkPurpleTick, walkRange, 6),\n      getSnappingResult(Snapping.ONE_SEVEN, snaps.oneSeven, walkRange, 7),\n      getSnappingResult(Snapping.YELLOW_TICK, snaps.yellowTick, walkRange, 8),\n      getSnappingResult(Snapping.ONE_NINE, snaps.oneNine, walkRange, 9),\n      getSnappingResult(Snapping.ONE_TWELVE, snaps.oneTwelve, walkRange, 12),\n      getSnappingResult(Snapping.ONE_SIXTEEN, snaps.oneSixteen, walkRange, 16),\n      getSnappingResult(\n        Snapping.CUSTOM,\n        snaps.custom,\n        walkRange,\n        customDenominator / customNumerator\n      )\n    ]\n  }\n\n  const customSnapping = customNumerator.toString().concat('/').concat(customDenominator.toString())\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-6\">\n        <div className=\"note-col\">\n          <p className=\"note\">\n            <strong className=\"fake-bold\">All values are estimates.</strong> Calculating the dash\n            distance isn't really possible as it all depends where you currently are when catching\n            the previous fruit.\n          </p>\n        </div>\n      </div>\n      <div className=\"col-12\">\n        <table>\n          <thead>\n            <tr>\n              <th rowSpan={2}>Snap</th>\n              <th rowSpan={2}>Milliseconds</th>\n              <th colSpan={2}>Distance Range</th>\n            </tr>\n            <tr>\n              <th>Osu Pixels</th>\n              <th>X Distance</th>\n            </tr>\n          </thead>\n          <tbody>\n            {result.map((value, index) => {\n              const key = `result-${index}`\n              return (\n                <tr key={key}>\n                  <td>{value.snapping === Snapping.CUSTOM ? customSnapping : value.snapping}</td>\n                  <td>{Math.round(value.msSnapping)}</td>\n                  <td>\n                    {Math.floor(value.minDistance)} - {Math.floor(value.maxDistance)}\n                  </td>\n                  <td>\n                    {Math.ceil(value.minXDistance * 100) / 100} -{' '}\n                    {Math.ceil(value.maxXDistance * 100) / 100}\n                  </td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\ninterface SnappingDashResult {\n  snapping: Snapping\n  msSnapping: number\n  minDistance: number\n  maxDistance: number\n  minXDistance: number\n  maxXDistance: number\n}\n","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\hyperTriggerDistance\\HyperTriggerDistanceCalculator.tsx",["123"],[],"import React, { useEffect, useState } from 'react'\nimport { MillisecondSnappingReference, Snapping } from '../../../Types'\nimport { calculateSnaps } from '../../../utils/MilliSecondsUtil'\n\ninterface HyperTriggerDistanceCalculatorProps {\n  bpm: number\n  circleSize: number\n  sliderVelocity: number\n  sliderVelocityMultiplier: number\n  customNumerator: number\n  customDenominator: number\n}\n\nexport default function HyperTriggerDistanceCalculator({\n  bpm,\n  circleSize,\n  sliderVelocity,\n  sliderVelocityMultiplier,\n  customNumerator,\n  customDenominator\n}: HyperTriggerDistanceCalculatorProps) {\n  const [result, setResult] = useState<SnappingResult[]>([])\n\n  useEffect(() => {\n    const snaps = calculateSnaps(bpm, customNumerator, customDenominator)\n    setResult(calculateTriggerDistances(snaps))\n  }, [\n    circleSize,\n    bpm,\n    sliderVelocity,\n    sliderVelocityMultiplier,\n    customNumerator,\n    customDenominator\n  ])\n\n  function getTriggerDistance(ms: number, dashRange: number): number {\n    const timeToNext = ms - 1000 / 60 / 4\n    return timeToNext + dashRange\n  }\n\n  function getSnappingResult(\n    snapping: Snapping,\n    snap: number,\n    dashRange: number,\n    xDistanceMultiplier: number\n  ): SnappingResult {\n    const tickDistance = getTriggerDistance(snap, dashRange)\n    const calculatedXDistance =\n      (tickDistance / (sliderVelocity * sliderVelocityMultiplier * 100)) * xDistanceMultiplier\n    let osuRoundedXDistance\n\n    if (snap < 50) {\n      osuRoundedXDistance = calculatedXDistance * 1.02\n    } else if (snap < 100) {\n      osuRoundedXDistance = calculatedXDistance * 1.01\n    } else if (snap < 200) {\n      osuRoundedXDistance = calculatedXDistance * 1.005\n    } else {\n      osuRoundedXDistance = calculatedXDistance\n    }\n\n    return {\n      snapping,\n      msSnapping: snap,\n      xDistance: osuRoundedXDistance,\n      distanceNeed: tickDistance\n    }\n  }\n\n  function calculateTriggerDistances(snaps: MillisecondSnappingReference): SnappingResult[] {\n    const catchDifficulty = (circleSize - 5.0) / 5.0\n    const fruitWidth = (64.0 * (1.0 - 0.699999988079071 * catchDifficulty)) / 128.0\n    const catcherWidth = 305.0 * fruitWidth * 0.7\n    const dashRange = catcherWidth / 2.0\n\n    return [\n      getSnappingResult(Snapping.WHITE_TICK, snaps.whiteTick, dashRange, 1),\n      getSnappingResult(Snapping.RED_TICK, snaps.redTick, dashRange, 2),\n      getSnappingResult(Snapping.PURPLE_TICK, snaps.purpleTick, dashRange, 3),\n      getSnappingResult(Snapping.BLUE_TICK, snaps.blueTick, dashRange, 4),\n      getSnappingResult(Snapping.ONE_FIVE, snaps.oneFive, dashRange, 5),\n      getSnappingResult(Snapping.DARK_PURPLE_TICK, snaps.darkPurpleTick, dashRange, 6),\n      getSnappingResult(Snapping.ONE_SEVEN, snaps.oneSeven, dashRange, 7),\n      getSnappingResult(Snapping.YELLOW_TICK, snaps.yellowTick, dashRange, 8),\n      getSnappingResult(Snapping.ONE_NINE, snaps.oneNine, dashRange, 9),\n      getSnappingResult(Snapping.ONE_TWELVE, snaps.oneTwelve, dashRange, 12),\n      getSnappingResult(Snapping.ONE_SIXTEEN, snaps.oneSixteen, dashRange, 16),\n      getSnappingResult(\n        Snapping.CUSTOM,\n        snaps.custom,\n        dashRange,\n        customDenominator / customNumerator\n      )\n    ]\n  }\n\n  const customSnapping = customNumerator.toString().concat('/').concat(customDenominator.toString())\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-9\">\n        <div className=\"note-col\">\n          <p className=\"note\">\n            <ul>\n              <li>\n                <strong className=\"fake-bold\">Decimal numbers work for all fields.</strong> For\n                example 4.5 for circle size.\n              </li>\n              <li>\n                <strong className=\"fake-bold\">Osu Pixels can be 1 pixel off.</strong> The current\n                version of osu stable seems to cast to an integer with hyperdash generation but\n                calculations here are done using ms values, not based of snapping like is done in\n                the editor.\n              </li>\n              <li>\n                <strong className=\"fake-bold\">X Distance is an estimate.</strong> The current\n                version of osu stable does some strange roundings, the purpose of this value is to\n                give you somewhat of an idea what value to use for your hyperdashes.\n              </li>\n            </ul>\n          </p>\n        </div>\n      </div>\n      <div className=\"col-12\">\n        <table>\n          <thead>\n            <tr>\n              <th rowSpan={2}>Snap</th>\n              <th rowSpan={2}>Milliseconds</th>\n              <th colSpan={2}>Trigger distance</th>\n            </tr>\n            <tr>\n              <th>Osu Pixels</th>\n              <th>X Distance</th>\n            </tr>\n          </thead>\n          <tbody>\n            {result.map((value, index) => {\n              const key = `result-${index}`\n              return (\n                <tr key={key}>\n                  <td>{value.snapping === Snapping.CUSTOM ? customSnapping : value.snapping}</td>\n                  <td>{Math.round(value.msSnapping)}</td>\n                  <td>{Math.floor(value.distanceNeed)}</td>\n                  <td>{Math.ceil(value.xDistance * 100) / 100}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\ninterface SnappingResult {\n  snapping: Snapping\n  msSnapping: number\n  xDistance: number\n  distanceNeed: number\n}\n","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\SelectedTool.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\SelectedToolSelector.tsx",["124","125","126","127"],[],"import React from 'react'\nimport { Tool } from '../../Types'\n\ninterface SelectedToolSelectorProps {\n  selectedTool: string\n  setSelectedTool: React.Dispatch<React.SetStateAction<Tool>>\n}\n\nexport default function SelectedToolSelector({\n  selectedTool,\n  setSelectedTool\n}: SelectedToolSelectorProps) {\n  return (\n    <>\n      <a\n        className={`tools__tool-selector-option ${\n          selectedTool === 'Slider Velocity' ? 'active-tool' : ''\n        }`}\n        onClick={() => setSelectedTool('Slider Velocity')}\n      >\n        Slider Velocity\n      </a>\n      <a\n        className={`tools__tool-selector-option ${\n          selectedTool === 'Snapping' ? 'active-tool' : ''\n        }`}\n        onClick={() => setSelectedTool('Snapping')}\n      >\n        Snapping\n      </a>\n      <a\n        className={`tools__tool-selector-option ${\n          selectedTool === 'Trigger Distance' ? 'active-tool' : ''\n        }`}\n        onClick={() => setSelectedTool('Trigger Distance')}\n      >\n        Trigger Distance\n      </a>\n      <a\n        className={`tools__tool-selector-option ${\n          selectedTool === 'Dash Distance' ? 'active-tool' : ''\n        }`}\n        onClick={() => setSelectedTool('Dash Distance')}\n      >\n        Dash Distance\n      </a>\n    </>\n  )\n}\n","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\snappingSpecifier\\SnappingSpecifier.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\snappingSpecifier\\SnappingSpecifierForm.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\svFinder\\SliderVelocityCalculator.tsx",["128"],[],"import React, { useEffect, useState } from 'react'\nimport { Difficulty } from '../../../Types'\n\ninterface SliderVelocityCalculatorProps {\n  bpm: number\n  ascendance: boolean\n}\n\nexport default function SliderVelocityCalculator({\n  bpm,\n  ascendance\n}: SliderVelocityCalculatorProps) {\n  const [result, setResult] = useState<SliderVelocityResult[]>([])\n\n  useEffect(() => {\n    setResult(calculateIdealSliderVelocity())\n  }, [bpm, ascendance])\n\n  function calculateIdealSliderVelocity(): SliderVelocityResult[] {\n    let rainSV\n\n    if (ascendance) {\n      rainSV = 375 / bpm\n    } else {\n      rainSV = 300 / bpm\n    }\n\n    return [\n      { diff: Difficulty.CUP, sv: rainSV * 0.72 },\n      { diff: Difficulty.SALAD, sv: rainSV * 0.78 },\n      { diff: Difficulty.PLATTER, sv: rainSV * 0.85 },\n      { diff: Difficulty.RAIN, sv: rainSV },\n      { diff: Difficulty.OVERDOSE, sv: rainSV * 1.1 },\n      { diff: Difficulty.DELUGE, sv: rainSV * 1.2 }\n    ]\n  }\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-6\">\n        <div className=\"note-col\">\n          <p className=\"note\">\n            <strong className=\"fake-bold\">\n              While the given result is provided as the \"Ideal SV\" please keep in mind to test\n              yourself as well.\n            </strong>{' '}\n            The calculated SVs are based on the catchers speed (300 units per second).\n          </p>\n        </div>\n      </div>\n      <div className=\"col-6\">\n        <table>\n          <thead>\n            <tr>\n              <th>Difficulty</th>\n              <th>Ideal Base SV</th>\n            </tr>\n          </thead>\n          <tbody>\n            {result.map((value, index) => {\n              const key = `result-${index}`\n              return (\n                <tr key={key}>\n                  <th>{value.diff}</th>\n                  <td>{Math.ceil(value.sv * 100) / 100}</td>\n                </tr>\n              )\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\ninterface SliderVelocityResult {\n  diff: Difficulty\n  sv: number\n}\n","C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\svFinder\\SliderVelocityForm.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\components\\tools\\ToolsSideBar.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\index.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\pages\\guides\\Guides.tsx",["129","130"],[],"import React from 'react'\nimport Markdown from '../../components/markdown/Markdown'\nimport { NavLink } from 'react-router-dom'\n\ninterface GuidesProps {\n  markdown: string\n  guideName?: string | undefined\n}\n\nexport default function Guides({ markdown, guideName }: GuidesProps) {\n  return (\n    <div className=\"wrapper page\">\n      <h1 className=\"page__header\">Guides</h1>\n      <div className=\"page__breadcrumb\">\n        {guideName ? (\n          <>\n            <NavLink to=\"/guides\" className=\"page__breadcrumb-item\">\n              Guides\n            </NavLink>\n            <a className=\"page__breadcrumb-item\">{guideName}</a>\n          </>\n        ) : (\n          <a className=\"page__breadcrumb-item\">Guides</a>\n        )}\n      </div>\n      <div className=\"page__wrapper\">\n        <div className=\"page__container\">\n          <Markdown markdownFile={markdown} />\n        </div>\n      </div>\n    </div>\n  )\n}\n","C:\\Coding\\Osu\\greaper-website\\src\\pages\\home\\Home.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\pages\\NotFound.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\pages\\tools\\Tools.tsx",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\Types.ts",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\utils\\FormUtil.ts",[],[],"C:\\Coding\\Osu\\greaper-website\\src\\utils\\MilliSecondsUtil.ts",[],[],{"ruleId":"131","severity":1,"message":"132","line":27,"column":6,"nodeType":"133","endLine":34,"endColumn":4,"suggestions":"134"},{"ruleId":"131","severity":1,"message":"132","line":27,"column":6,"nodeType":"133","endLine":34,"endColumn":4,"suggestions":"135"},{"ruleId":"136","severity":1,"message":"137","line":15,"column":7,"nodeType":"138","endLine":20,"endColumn":8},{"ruleId":"136","severity":1,"message":"137","line":23,"column":7,"nodeType":"138","endLine":28,"endColumn":8},{"ruleId":"136","severity":1,"message":"137","line":31,"column":7,"nodeType":"138","endLine":36,"endColumn":8},{"ruleId":"136","severity":1,"message":"137","line":39,"column":7,"nodeType":"138","endLine":44,"endColumn":8},{"ruleId":"131","severity":1,"message":"139","line":17,"column":6,"nodeType":"133","endLine":17,"endColumn":23,"suggestions":"140"},{"ruleId":"136","severity":1,"message":"137","line":20,"column":13,"nodeType":"138","endLine":20,"endColumn":50},{"ruleId":"136","severity":1,"message":"137","line":23,"column":11,"nodeType":"138","endLine":23,"endColumn":48},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'calculateTriggerDistances'. Either include it or remove the dependency array.","ArrayExpression",["141"],["142"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'calculateIdealSliderVelocity'. Either include it or remove the dependency array.",["143"],{"desc":"144","fix":"145"},{"desc":"144","fix":"146"},{"desc":"147","fix":"148"},"Update the dependencies array to be: [circleSize, bpm, sliderVelocity, sliderVelocityMultiplier, customNumerator, customDenominator, calculateTriggerDistances]",{"range":"149","text":"150"},{"range":"151","text":"150"},"Update the dependencies array to be: [bpm, ascendance, calculateIdealSliderVelocity]",{"range":"152","text":"153"},[783,906],"[circleSize, bpm, sliderVelocity, sliderVelocityMultiplier, customNumerator, customDenominator, calculateTriggerDistances]",[803,926],[423,440],"[bpm, ascendance, calculateIdealSliderVelocity]"]